---
- name: 'pull docker images'
  docker_image:
    name: "{{ item }}"
  with_items:
    - "{{ wg_image_name }}:{{ wg_image_tag }}"
    - "{{ jenkins_image_name }}:{{ jenkins_image_tag }}"
    - "{{ postfix_image_name }}:{{ postfix_image_tag }}"
    - "{{ wg_image_name }}:{{ wg_image_tag }}"

- name: 'make temporary directory for custom Jenkins container build'
  file:
    path: "{{ customised_jenkins_build_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: 'copy custom Jenkins Dockerfile'
  template:
    src: Dockerfile.j2
    dest: "{{ customised_jenkins_build_path }}/Dockerfile"
    owner: root
    group: root
    mode: 0644

- name: 'copy plugins list'
  template:
    src: plugins.txt
    dest: "{{ customised_jenkins_build_path }}/plugins.txt"
    owner: root
    group: root
    mode: 0644

- name: 'build the customised container for plugin installations'
  docker_image:
    path: "{{ customised_jenkins_build_path }}"
    name: "{{ customised_jenkins_image_name }}"

- name: 'create jenkins host directories to be mounted into container'
  file:
    path: "{{ jenkins_casc_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "{{ jenkins_data_mount_path }}"
    - "{{ jenkins_home_path }}"
    - "{{ jenkins_casc_path }}"

- name: 'copy casc file'
  template:
    src: jenkins.yml
    dest: "{{ jenkins_casc_path }}/jenkins.yml"
    owner: root
    group: root
    mode: 0644

# The Ansible file module doesn't allow assigning by IDs.
# These are the permissions necessary for the container to work correctly.
- name: 'jenkins home ownership'
  command: "chown 1000:1000 '{{ jenkins_data_mount_path }}/jenkins_home'"
  args:
    warn: false

- name: 'copy jenkins service file'
  template:
    src: jenkins.service.j2
    dest:  "/etc/systemd/system/{{ jenkins_service_name }}.service"
    owner: root
    group: root
    mode: 0644
  register: service_file_result

- name: 'create directory for docker-compose definition'
  file:
    path: "/opt/dockerapps/{{ jenkins_service_name }}"
    state: directory
    owner: root
    group: root
    mode: 0744

- name: 'copy docker compose file'
  template:
    src: docker-compose.yml.j2
    dest: "/opt/dockerapps/{{ jenkins_service_name }}/docker-compose.yml"
    owner: root
    group: root
    mode: 0644
  register: compose_file_result

- name: 'copy admin user password secret'
  copy:
    content: "{{ secret_jenkins_admin_user_password }}"
    dest: "{{ secret_jenkins_admin_user_password_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy jenkins user aws secret key'
  copy:
    content: "{{ secret_aws_jenkins_secret_access_key }}"
    dest: "{{ secret_aws_jenkins_secret_access_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy jenkins-ec2 user aws secret key'
  copy:
    content: "{{ secret_aws_jenkins_ec2_user_secret_access_key }}"
    dest: "{{ secret_aws_jenkins_ec2_user_secret_access_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy packer user aws secret key'
  copy:
    content: "{{ secret_aws_packer_user_secret_access_key }}"
    dest: "{{ secret_aws_packer_user_secret_access_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy jenkins-build_artifacts user aws secret key'
  copy:
    content: "{{ secret_aws_jenkins_build_user_secret_access_key }}"
    dest: "{{ secret_aws_jenkins_build_user_secret_access_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy jenkins-deploy_artifacts user aws secret key'
  copy:
    content: "{{ secret_aws_jenkins_deploy_user_secret_access_key }}"
    dest: "{{ secret_aws_jenkins_deploy_user_secret_access_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy ssh key for docker build slave'
  copy:
    content: "{{ docker_slave_ssh_key }}"
    dest: "{{ secret_docker_slave_ssh_key_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy github token secret'
  copy:
    content: "{{ secret_github_access_token }}"
    dest: "{{ secret_github_access_token_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy github auth token secret'
  copy:
    content: "{{ secret_github_auth_token }}"
    dest: "{{ secret_github_auth_token_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy github Maidsafe-QA user password'
  copy:
    content: "{{ secret_github_maidsafe_qa_user_password }}"
    dest: "{{ secret_github_maidsafe_qa_user_password_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'copy crates.io token'
  copy:
    content: "{{ secret_crates_io_token }}"
    dest: "{{ secret_crates_io_token_path }}"
    owner: root
    group: root
    mode: 0644

- name: 'refresh systemd to load jenkins service file'
  command: systemctl daemon-reload
  when: service_file_result.changed

- name: 'copy backup script'
  template:
    src: jenkins_backup
    dest: "{{ backup_script_path }}"
    owner: root
    group: root
    mode: 0744

- name: 'copy backup user key'
  copy:
    content: "{{ secret_backup_user_ssh_key }}"
    dest: "{{ backup_user_key_path }}"
    owner: root
    group: root
    mode: 0600

- name: 'cron job for backup'
  cron:
    name: backup_jenkins
    day: "*"
    hour: 2
    minute: 0
    job: "{{ backup_script_path }}"

- name: 'install aws cli for backups'
  pip:
    name: 'awscli'

- name: 'restart {{ jenkins_service_name }} service'
  service:
    name: "{{ jenkins_service_name }}"
    state: restarted
  when:
    - service_file_result.changed or compose_file_result.changed

- name: 'start {{ jenkins_service_name }} service'
  service:
    name: "{{ jenkins_service_name }}"
    state: started
    enabled: True
